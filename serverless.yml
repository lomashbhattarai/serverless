# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: trader
plugins:
  - serverless-offline
  - serverless-plugin-include-dependencies
# app and org for use with dashboard.serverless.com
#app: trader-app
#org: lomashbhattarai1

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  timeout: 30

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
  excludeDevDependencies: false
  include:
    - utils/**
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
  brokers:
    handler: handler.brokers
    timeout: 30
    events:
      - http:
          path: brokers
          method: get
          cors: true
#  updateExistingData:
#    handler: handler.updateExistingData
#    timeout: 30
#    events:
#      - http:
#          path: updateData
#          method: get
#          cors: true
  companies:
    handler: handler.companies
    timeout: 30
    events:
      - http:
          path: companies
          method: get
          cors: true
  todaysPrice:
    handler: handler.todaysPrice
    timeout: 30
    events:
      - schedule: cron(0/30 12-15 ? * SUN-FRI *)
      - http:
          path: todaysPrice
          method: get
          cors: true
  todaysPriceHistory:
    handler: handler.todaysPriceHistory
    timeout: 30
    events:
      - schedule: cron(0/30 12-15 ? * SUN-FRI *)
      - http:
          path: todaysPriceHistory
          method: get
          cors: true
  getBrokersFromDb:
    handler: handler.getBrokersFromDb
    timeout: 30
    events:
      - http:
          path: getBrokers
          method: get
          cors: true
  getTodaysPriceFromDb:
    handler: handler.getTodaysPriceFromDb
    timeout: 30
    events:
      - http:
          path: getTodaysPrice
          method: get
          cors: true
  getHistoryBySymbol:
    handler: handler.getHistoryBySymbol
    timeout: 30
    events:
      - http:
          path: getHistoryBySymbol/{symbol}
          method: get
          cors: true
  getCompanyFromDb:
    handler: handler.getCompanyFromDb
    timeout: 30
    events:
      - http:
          path: getCompanyFromDb
          method: get
          cors: true
  registeredOnly:
    handler: handler.hiUsers
    events:
      - http:
          path: /hiUsers
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
#  signUp:
#    handler: handler.signUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: my-user-pool
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: my-user-pool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
